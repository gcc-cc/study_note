#BLE--低功耗蓝牙
BLE是蓝牙4.0版本开始支持的新的、低功耗版本的蓝牙技术规范
蓝牙4.0版本分为两种模式：单模蓝牙和双模蓝牙。
蓝牙是一种近距离无线通信技术，运行在2.4GHz
 *单模蓝牙，即低功耗蓝牙模式，是蓝牙4.0中的重点技术，低功耗，快连接，长距离。
 *双模蓝牙，支持低功耗蓝牙的同时还兼容经典蓝牙，经典蓝牙的特点是大数据高速率。

#BLE特点
 *低功耗，使用纽扣电池就可以运行数月至数年。
 *快连接，毫秒级的连接速度，传统蓝牙甚至长达数分钟。
 *远距离，长达数百米的通信距离，而传统蓝牙通常10米左右。
蓝牙联盟沿用经典蓝牙的规范内容，为低功耗蓝牙定义了一些标准profile，Profile理解为数据规范，只要遵守该规范，任意厂家的蓝牙设备，均可以相互连接与通信。
低功耗蓝牙支持的标准Profile有：
 *HID，用于无线鼠标，键盘或其他遥控设备。
 *BatteryServices，电池状态服务，用于告知电池电量状态。
 *HRP，心率计Profile，用于心率采集。等等。
另外，低功耗蓝牙还可以自定义Profile：
 *支持自定义Profile，可以收发任意格式的数据，如01和00
 *支持自定义设备，支持任意设备的连接和通信，例如智能蓝牙插座等。
tip：低功耗蓝牙的profile均基于GATT(通用属性规范)之上，如HID over GATT。也就是说，经典蓝牙中的HID规范与低功耗蓝牙中的HID规范用的是两个不同的通道。

#BLE工作流程
##角色
BLE设备角色主要分为两种角色，主机(Master或Central)和从机(Peripheral)，当主机和从机建立连接之后才能相互收发数据
 *主机，主机可以发起对从机的扫描连接。例如手机，通常作为BLE的主机设备
 *从机，从机只能广播并等待主机的连接。例如智能手环，是作为BLE的从机设备
另外还有观察者(observe)和广播者(Broadcaster)，这两种角色不常使用，但也十分有用，例如iBeacon，就可以使用广播者角色来做，只需要广播特定内容即可。
 *观察者，观察者角色监听空中的广播事件，和主机唯一的区别是不能发起连接，只能持续扫描从机。
 *广播者，广播者可以持续广播信息，和从机的唯一区别是不能被主机连接，只能广播数据。
蓝牙协议栈没有限制设备的角色范围，同一个BLE设备，可以作为主机，也可以作为从机，我们称之为主从一体，主从一体的好处是，每个BLE设备都是对等的，可以发起连接，也可以被别人连接，更加实用。

##广播
广播是指从机每经过一个时间间隔发送一次广播数据包，这个时间间隔称为广播间隔，这个广播动作叫做广播事件，只有当从机处于广播状态时，主机才能发现该从机，
在每个广播事件中，广播包会分别在37，38，39三个信道上依次广播。

广播时间间隔的范围是从20ms到10.42s，广播间隔影响建立连接的时间。广播间隔越大，连接的时间越长。
另外BLE链路层会在两个广播事件之间添加一个0~10ms的随机延时，保证多个设备广播时，不会一直碰撞广播。也就是说，设置100ms的广播间隔，实际上两次广播事件的时间间隔可能是100~110ms之间的任意时间。

广播数据包最多能携带31个字节的数据，一般包含可读的设备名称，设备是否可连接等信息。
当主机收到从机广播的数据包后，它可以再发送获取更多数据包的请求，这个时候从机将广播扫描回应数据包，扫描回应数据包和广播包一样，可以携带32个字节的数据。
tip：蓝牙4.x，广播有效载荷最多是31个字节。而在蓝牙5.0中，通过添加额外的广播信道和新的广播PDU，将有效载荷增加到了255个字节。

##扫描
扫描是主机监听从机广播数据包和发送扫描请求的过程，主机通过扫描，可以获取到从机的广播包以及扫描回应数据包，主机可以对已扫描到的从机设备发起连接请求，从而连接从机设备并通信。
扫描动作有两个比较重要的时间参数：扫描窗口和扫面间隔，如果扫描窗口等于扫描间隔，那么主机将一直处于扫描状态之中，持续监听从机广播包。
 **扫描窗口和扫描间隔设置的时间不能大于10.24S。
 **扫描窗口设置的值不能大于扫描间隔的值。
 **如果扫描窗口 = 扫描间隔的话，说明主机一直再进行扫描。
 *被动扫描，主机监听广播信道的数据，当接收到广播包时，协议栈将向上层(也就是应用层，用户可编程)传递广播包。
 *主动扫描，主动扫描除了完成被动扫描的动作外，还会向从机发送一个扫描请求，从机收到该请求时，会再次发送一个称作扫描回应的广播包。
所以，主动扫描比被动扫描，可以多收到扫描回应数据包。

##连接
在BLE连接中，使用调频方案，两个设备在特定时间、特定频道上彼此发送和接收数据。这些设备稍后在新的通道(协议栈的链路层处理通道切换)上通过这个约定的时间相遇。这次用于收发数据的相遇称为连接事件。如果没有要发送或接收的应用数据，则交换链路层数据来维护连接。两个连接事件之间的时间跨度称为连接间隔，是以1.25ms为单位，范围从最小值7.5ms到最大值4.0s
###连接参数
Connection Interval连接间隔，两次连接事件之间的时间间隔称为连接间隔。1.25ms为单位，范围从最小值7.5ms到最大值4.0s
Slave Latency从机延迟，如果从机没有要发送的数据，则可以跳过连接事件，继续保持睡眠节省电量。
Supervision Time-out监控超时，是两次成功连接事件之间的最长时间。如果在此时间内没有成功的连接事件，设备将终止连接并返回到未连接状态。该参数值以10ms为单位，监控超时值可以从最小值10(100ms)到3200(32.0s)。超时必须大于有效的连接间隔。
###连接参数更新请求
连接参数由主机发起连接的时候提供，如果从机对连接参数有自己的要求，例如要求更低的功耗，或者更高的通信速率等，从机可以向主机发送连接参数更新请求。
从机可以在连接后的任何时候发起连接参数更新请求，但最好不要在主从建立连接后立刻发起，建议延迟5s左右再发送请求。
连接参数更新请求可以修改：Connection Interval连接间隔，Slave Latency从机延迟，Supervision Time-out监控超时。
###有效连接间隔
Effective Connection Interval有效连接间隔等于两个连接事件之间的时间跨度，假设从机跳过最大数量的连接事件，且允许从机延迟(如果从机延迟设置为0，则有效连接间隔等于实际连接间隔)。
从机延迟表示可以跳过的最大事件数。该数字的范围可以从最小值0(意味着不能跳过连接事件)到最大值499。最大值不能使有效连接间隔大于16秒。间隔可以使用以下公式计算：
Effective Connection Interval = (Connection Interval) × (1 + [Slave Latency])
Consider the following example:
 *Connection Interval: 80(100ms)
 *Slave Latency: 4
 *Effective Connection Interval: (100ms) × (1 + 4) = 500ms
当没有数据从从机发送到主机时，从机每500ms一个连接事件交互一次。
###IOS对连接参数的要求
不同的平台对有连接间隔有着不同的要求，例如IOS系统对ble的连接间隔有着如下的要求。 *Interval Max * (Slave Latency + 1) <= 2s
 *Interval Min >= 20ms
 *Interval Min + 20ms <= Interval Max
 *Slave Latency <= 4
 *SupervisionTimeout <= 6s
 *Interval Max * (Slave Latency + 1) * 3 < SupervisionTimeout
###连接参数的优化考量
在许多应用中，从机跳过最大连接事件数。选择正确的连接参数组在低功耗蓝牙设备的功率优化中起重要作用。以下列表给出了连接参数设置中权衡的总体概述。
减少连接间隔如下：
 *增加两个设备的功耗
 *增加双向吞吐量
 *减少任一方向发送数据的时间
增加连接间隔如下：
 *降低两个设备的功耗
 *降低双向吞吐量
 *增加任一方向发送数据的时间
减少从机延迟(或将其设置为零)如下：
 *增加外围设备的功耗
 *减少外围设备接收从中央设备发送的数据的时间
增加从机延迟如下：
 *在周边没有数据发送期间，可以降低外设的功耗到主机设备
 *增加外设设备接收从主机设备发送的数据的时间

##通信
通俗的说，我们将从机具有的数据或者属性特征，称之为Profile，Profile可翻译为：配置文件。
从机中添加Profile配置文件(定义和存储Profile)，作为GATT的Server端，主机作为GATT的Client端。
Profile包含一个或者多个Service，每个Service又包含一个或者多个Characteristic。主机可以发现和获取从机的Service和Characteristic，然后与之通信。Characteristic是主从通信的最小单元。
 *主机可主动向从机Write写入或Read读取数据。
 *从机可主动向主机Notify通知数据。
这里引用了服务Service和特征值Characteristic的概念。每个服务和特征值都有自己的唯一标识UUID，标准UUID，标准UUID为128位，蓝牙协议栈中一般采用16位，也就是两个字节的UUID格式。
一个从机设备包括一个或者多个服务；一个服务中又可以包括一条或者多条特征值，每个特征值都有自己的属性Property，属性的取值有：
可读Read，可写Write以及通知Notify。
 *可读可写的字面意思容易理解，表示该特征值可以被主机读取和写入数据，
 *而通知则表示从机可以主动向主机发送通知数据。这便是主从机之间两个典型的通信方式。
##断开
主机或从机都可以发起断开连接请求，对方会收到该请求，然后断开连接恢复连接前的状态。

#BLE协议栈
BLE协议栈一般是指芯片厂家，依据Bluetooth SIG发布的Bluetooth Core Specification核心协议的实现的代码固件，并提供函数接口，由芯片内部程序调用，可实现上节BLE工作流程等相关功能。
常见的协议栈由德州仪器TI的ble-stack和Nordic的SoftDevice。

##功能框图

##协议栈结构
 1.底层：Controller
 2.中层：Host
 3.顶层：Application
然后每一层又分成若干个子模块。
tip：将位于顶层的应用层Application也归到协议栈中描述，其实，应用层Application不属于协议栈，它是用来调用协议栈提供的接口，然后实现蓝牙的功能。
###控制器Controller
 *Physical Layer，简称：PHY，物理层。PHY层用来指定BLE所用的无线频段，调制解调方式和方法等。PHY层做得好不好，直接决定整个BLE芯片的功耗，灵敏度以及selectivity等射频指标。
 *Link Layer，简称：LL，链路层。LL层是整个BLE协议栈的核心，也是BLE协议栈的难点和重点。像Nordic的BLE协议栈能同时支持20个link(连接)，就是LL层的功劳。LL层要做的事情非常多，比如具体选择哪个射频通道进行通信，怎么识别空中数据包，具体在哪个时间点把数据包发送出去，怎么保证数据的完整性，ACK如何接收，如何进行重传，以及如何对链路进行管理和控制等等。LL层只负责把数据发出去或者收回来，对数据进行怎样的解析则交给上面的GAP或者ATT。
 *Host Controller Interface，简称：HCI。协议栈应用开发中，我们会经常看到HCI的身影，它对上Host提供Controller的功能接口，所以称作Host Controller Interface。
###主控Host
 *Logical Link Control Adaptation Protocol，简称：L2CAP。L2CAP对LL进行了一次简单的封装，LL只关心传输的数据本身，L2CAP就要区分是加密通道还是普通通道，同时还要对连接间隔进行管理。
 *Attribute Protocol，简称ATT。ATT层用来定义用户命令及命令操作的数据，比如读取某个数据或者写某个数据。BLE协议栈中，开发者接触最多的就是ATT。BLE引入了attribute概念，用来描述一条一条的数据。Attribute除了定义数据，同时定义该数据可以使用的ATT命令，因此这一层被称为ATT层。
 *Security Manager，简称：SM。SMP用来管理BLE连接的加密和安全的，如何保证连接的安全性，同时不影响用户的体验，这些都是SMP要考虑的工作。
 *Generic Access Profile，简称：GAP。GAP是对LL层payload(有效数据包)如何进行解析的两种方式中的一种，而且是最简单的那一种。GAP简单的对LL payload进行一些规范和定义，因此GAP能实现的功能极其有限。GAP目前主要用来进行广播，扫描和发起连接等。
 *Generic Attribute Profile，简称：GATT。GATT用来规范attribute中的数据内容，并运用group(分组)的概念对attribute进行分类管理。没有GATT，BLE协议栈也能跑，但互联互通就会出问题，也正是因为有了GATT和各种各样的应用profile，BLE摆脱了ZigBee等无线协议的兼容性困境，成了出货量最大的2.4G无线通信产品。
###应用Application
应用层是用户开发实际蓝牙应用的地方，包含必要的协议栈参数设置，以及各种功能函数的调用。我们分别从蓝牙从机和蓝牙主机两种设备来分析。
 *蓝牙从机
  **相关硬件和基础服务初始化
  **设置广播参数：广播数据，广播间隔，扫描回应等参数或者数据。
  **设置Profile：添加从机服务、特征值、还有设置回调函数用于接收主机数据等。
  **设置绑定管理参数(可选)
  **启动广播，开始运行。
  **等待相关事件，及事件处理，例如收到主机发来的数据，被链接等。
 *蓝牙主机
  **相关硬件和基础服务初始化
  **设置扫描参数
  **设置连接参数
  **设置绑定管理参数(可选)
  **启动协议栈，开始运行
  **等待相关事件，及事件处理，例如扫描事件，从机的Notify事件等等。、
  
#GAP和GATT
蓝牙协议栈分为两类结构：控制器(Controller)和主机(Host)。每个类别都有子类别，这些类别执行特定的角色。我们将要研究的两个子类别是：通用访问配置文件(GAP)和通用属性配置文件(GATT)。
 *GAP是Generic Access Profile的缩写，中文含义是：通用访问配置文件。
 *GATT是Generic Attribute Profile的缩写，中文含义是：通用属性配置文件。

##GAP和GATT
区分GAP和GATT很重要。
 *GAP定义了BLE网络堆栈的一般拓扑。
 *GATT详细描述了一旦设备建立连接后如何传输属性(数据)。
GATT特别关注如何根据其描述的规则格式化打包和发送数据。在BLE网络堆栈中，属性协议(ATT)与GATT紧密对齐，GATT直接位于ATT的顶部。GATT实际上使用ATT来描述如何从两个连接的设备交换数据。
##通用访问配置文件(GAP)
BLE设备可以使用两种机制与外界通信：广播或连接。这些机制受通用访问配置文件(GAP)准则的约束。GAP定义了启用BLE的设备如何使其自身可用，以及两个设备如何直接相互通信。
###建立联系(Connecting)
设备可以通过采用GAP中指定的以下角色来加入BLE网络：
A、广播(Broadcasting)：这些角色不必显式地相互连接即可传输数据。
 *广播者(Broadcaster)：广播公共数据包的设备，例如可以广播按下按钮的时间。
 *观察者(Observer)：侦听广播者发送的广告包中数据的设备。广播者和观察者之间没有任何连接。
B、连接(Connecting)：这些角色必须显式连接和握手才能传输数据。
 *从机设备(Peripheral)：通过广播，告知其他设备自己的存在，以便主机设备可以建立连接。连接后，从机设备不再向其他主机设备广播数据，而是保持与主机设备的连接。
  **从机设备功耗低，因为它们只需要定期发送信标即可。主机设备负责开始与从机设备的通信。
  **手环是BLE外设的一个示例。
 *主机设备(Central)：一种通过侦听广播包来启动与从机设备的连接的设备。主机设备可以连接到许多其他从机设备。
  **当主机设备要连接时，它将请求连接数据包发送到从机设备。如果从及设备接受来自主机设备的请求，则建立连接。
  **当您的手机连接到手环时，就是BLE Central设备的一个示例。
###连接后(Connected)
主机设备可以更新连接参数：主机设备通常在设备与其自身之间建立连接参数。只有主机设备能修改连接参数。但是，从及设备可以要求主机设备更改连接参数，及从机发送更新参数请求。
从机设备或主机设备可以终止连接：连接可能由于多种原因而终止，例如设备的电池可能耗尽或网络干扰可能导致连接失败。设备还可以主动与对等设备断开连接。

##通用属性配置文件(GATT)
###模型角色
GATT分为两种类型，注意与从机或主机无关。
客户端(Client)：客户端可以发送请求给GATT服务端，客户端可以读(Read)/写(Write)服务端的属性(Attributes)，通过属性可以通信数据。
服务端(Server)：服务端是用来存储属性(Attributes)的，每当客户端发送请求时，服务端会回应这些请求。
###客户端与服务端的关系
一个示例如下：手环采集了心跳信息，希望计算机读取该信息。手环充当服务端并提供信息。手机充当客户端，读取该信息。
GAP和GATT模型角色基本上彼此独立从及设备或主机设备都可以充当服务端或客户端，这取决于数据的流动方式。
在一般的主从通信时，主机可以通过读写从机的属性，实现接收和发送数据给从机，从机可以通过发送通知的方式实现与主机的通信。因此，一般从机是作为GATT的服务端，主机作为GATT的客户端。

#协议栈分层协作
下面以如何发送一个无线数据包的例子来简单阐述协议栈中各分层的作用和必要性。实际上，协议栈的实现可能更加负责，它需要考虑方方面面的因素。
##发送数据包
假设有设备A和设备B，设备A要把自己的电量状态83%(十六进制表示为0X53)发送给设备B，该怎么做呢？作为一个开发者，他希望越简单越好，对他而言，他希望调用一个简单的API就能完成这件事，比如send(0x53)，实际上我们的BLE协议栈就是这样设计的，开发者只需要调用send(0x53)就可以把数据发送出去了，其余的事情BLE协议栈帮你搞定。很多人会想，BLE协议栈是不是可以直接在物理层就把0x53发出去。
这种方式初看起来挺美的，但由于很多细节没有考虑到，实际是不可行的。首先，它没有考虑用哪一个射频信道来进行传输，在不更改API的情况下，我们只能对协议栈进行分层，为此引入LL层，开发者还是调用send(0x53)，send(0x53)再调用send_LL(0x53,2402M)(注：2402M位信道频率)。这里还有一个问题，设备B怎么知道这个数据包是发给自己的还是其他人的，为此BLE引入access address概念，用来指明接收者身份，其中，0x8E89BED6这个access address比较特殊，它表示要发给周边所有设备，即广播。如果你要一对一的进行通信(BLE协议将其称为连接)，即设备A的数据包只能设备B接收，同样设备B的数据包只能设备A接收，那么就必须生成一个独特的随机access address以标识设备A和设备B两者之间的连接。
##广播方式

